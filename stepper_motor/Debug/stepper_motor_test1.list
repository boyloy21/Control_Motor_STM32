
stepper_motor_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003360  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003538  08003538  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003540  08003540  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000074  080035bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080035bc  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5f4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d14  00000000  00000000  0002b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  0002de50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223ab  00000000  00000000  0002e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d057  00000000  00000000  00050ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cec8d  00000000  00000000  0005dbfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dbc  00000000  00000000  0012c8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003510 	.word	0x08003510

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	08003510 	.word	0x08003510

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_uldivmod>:
 8000b70:	b953      	cbnz	r3, 8000b88 <__aeabi_uldivmod+0x18>
 8000b72:	b94a      	cbnz	r2, 8000b88 <__aeabi_uldivmod+0x18>
 8000b74:	2900      	cmp	r1, #0
 8000b76:	bf08      	it	eq
 8000b78:	2800      	cmpeq	r0, #0
 8000b7a:	bf1c      	itt	ne
 8000b7c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b80:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b84:	f000 b974 	b.w	8000e70 <__aeabi_idiv0>
 8000b88:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b90:	f000 f806 	bl	8000ba0 <__udivmoddi4>
 8000b94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b9c:	b004      	add	sp, #16
 8000b9e:	4770      	bx	lr

08000ba0 <__udivmoddi4>:
 8000ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba4:	9d08      	ldr	r5, [sp, #32]
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	468e      	mov	lr, r1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d14d      	bne.n	8000c4a <__udivmoddi4+0xaa>
 8000bae:	428a      	cmp	r2, r1
 8000bb0:	4694      	mov	ip, r2
 8000bb2:	d969      	bls.n	8000c88 <__udivmoddi4+0xe8>
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	b152      	cbz	r2, 8000bd0 <__udivmoddi4+0x30>
 8000bba:	fa01 f302 	lsl.w	r3, r1, r2
 8000bbe:	f1c2 0120 	rsb	r1, r2, #32
 8000bc2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bc6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bca:	ea41 0e03 	orr.w	lr, r1, r3
 8000bce:	4094      	lsls	r4, r2
 8000bd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd4:	0c21      	lsrs	r1, r4, #16
 8000bd6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bda:	fa1f f78c 	uxth.w	r7, ip
 8000bde:	fb08 e316 	mls	r3, r8, r6, lr
 8000be2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be6:	fb06 f107 	mul.w	r1, r6, r7
 8000bea:	4299      	cmp	r1, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x64>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bf6:	f080 811f 	bcs.w	8000e38 <__udivmoddi4+0x298>
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	f240 811c 	bls.w	8000e38 <__udivmoddi4+0x298>
 8000c00:	3e02      	subs	r6, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c14:	fb00 f707 	mul.w	r7, r0, r7
 8000c18:	42a7      	cmp	r7, r4
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x92>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c24:	f080 810a 	bcs.w	8000e3c <__udivmoddi4+0x29c>
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	f240 8107 	bls.w	8000e3c <__udivmoddi4+0x29c>
 8000c2e:	4464      	add	r4, ip
 8000c30:	3802      	subs	r0, #2
 8000c32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c36:	1be4      	subs	r4, r4, r7
 8000c38:	2600      	movs	r6, #0
 8000c3a:	b11d      	cbz	r5, 8000c44 <__udivmoddi4+0xa4>
 8000c3c:	40d4      	lsrs	r4, r2
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e9c5 4300 	strd	r4, r3, [r5]
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0xc2>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80ef 	beq.w	8000e32 <__udivmoddi4+0x292>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x160>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xd4>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80f9 	bhi.w	8000e66 <__udivmoddi4+0x2c6>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	469e      	mov	lr, r3
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0e0      	beq.n	8000c44 <__udivmoddi4+0xa4>
 8000c82:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c86:	e7dd      	b.n	8000c44 <__udivmoddi4+0xa4>
 8000c88:	b902      	cbnz	r2, 8000c8c <__udivmoddi4+0xec>
 8000c8a:	deff      	udf	#255	; 0xff
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	f040 8092 	bne.w	8000dba <__udivmoddi4+0x21a>
 8000c96:	eba1 010c 	sub.w	r1, r1, ip
 8000c9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ca2:	2601      	movs	r6, #1
 8000ca4:	0c20      	lsrs	r0, r4, #16
 8000ca6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000caa:	fb07 1113 	mls	r1, r7, r3, r1
 8000cae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb2:	fb0e f003 	mul.w	r0, lr, r3
 8000cb6:	4288      	cmp	r0, r1
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x12c>
 8000cba:	eb1c 0101 	adds.w	r1, ip, r1
 8000cbe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x12a>
 8000cc4:	4288      	cmp	r0, r1
 8000cc6:	f200 80cb 	bhi.w	8000e60 <__udivmoddi4+0x2c0>
 8000cca:	4643      	mov	r3, r8
 8000ccc:	1a09      	subs	r1, r1, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cd8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cdc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x156>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x154>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	f200 80bb 	bhi.w	8000e6a <__udivmoddi4+0x2ca>
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfe:	e79c      	b.n	8000c3a <__udivmoddi4+0x9a>
 8000d00:	f1c6 0720 	rsb	r7, r6, #32
 8000d04:	40b3      	lsls	r3, r6
 8000d06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	431c      	orrs	r4, r3
 8000d18:	40f9      	lsrs	r1, r7
 8000d1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d22:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d26:	0c20      	lsrs	r0, r4, #16
 8000d28:	fa1f fe8c 	uxth.w	lr, ip
 8000d2c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d34:	fb08 f00e 	mul.w	r0, r8, lr
 8000d38:	4288      	cmp	r0, r1
 8000d3a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b8>
 8000d40:	eb1c 0101 	adds.w	r1, ip, r1
 8000d44:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d48:	f080 8088 	bcs.w	8000e5c <__udivmoddi4+0x2bc>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f240 8085 	bls.w	8000e5c <__udivmoddi4+0x2bc>
 8000d52:	f1a8 0802 	sub.w	r8, r8, #2
 8000d56:	4461      	add	r1, ip
 8000d58:	1a09      	subs	r1, r1, r0
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d60:	fb09 1110 	mls	r1, r9, r0, r1
 8000d64:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d6c:	458e      	cmp	lr, r1
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1e2>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d78:	d26c      	bcs.n	8000e54 <__udivmoddi4+0x2b4>
 8000d7a:	458e      	cmp	lr, r1
 8000d7c:	d96a      	bls.n	8000e54 <__udivmoddi4+0x2b4>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4461      	add	r1, ip
 8000d82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d86:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8a:	eba1 010e 	sub.w	r1, r1, lr
 8000d8e:	42a1      	cmp	r1, r4
 8000d90:	46c8      	mov	r8, r9
 8000d92:	46a6      	mov	lr, r4
 8000d94:	d356      	bcc.n	8000e44 <__udivmoddi4+0x2a4>
 8000d96:	d053      	beq.n	8000e40 <__udivmoddi4+0x2a0>
 8000d98:	b15d      	cbz	r5, 8000db2 <__udivmoddi4+0x212>
 8000d9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d9e:	eb61 010e 	sbc.w	r1, r1, lr
 8000da2:	fa01 f707 	lsl.w	r7, r1, r7
 8000da6:	fa22 f306 	lsr.w	r3, r2, r6
 8000daa:	40f1      	lsrs	r1, r6
 8000dac:	431f      	orrs	r7, r3
 8000dae:	e9c5 7100 	strd	r7, r1, [r5]
 8000db2:	2600      	movs	r6, #0
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	f1c2 0320 	rsb	r3, r2, #32
 8000dbe:	40d8      	lsrs	r0, r3
 8000dc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	4301      	orrs	r1, r0
 8000dcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dd8:	fb07 3610 	mls	r6, r7, r0, r3
 8000ddc:	0c0b      	lsrs	r3, r1, #16
 8000dde:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de2:	fb00 f60e 	mul.w	r6, r0, lr
 8000de6:	429e      	cmp	r6, r3
 8000de8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x260>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000df6:	d22f      	bcs.n	8000e58 <__udivmoddi4+0x2b8>
 8000df8:	429e      	cmp	r6, r3
 8000dfa:	d92d      	bls.n	8000e58 <__udivmoddi4+0x2b8>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4463      	add	r3, ip
 8000e00:	1b9b      	subs	r3, r3, r6
 8000e02:	b289      	uxth	r1, r1
 8000e04:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e08:	fb07 3316 	mls	r3, r7, r6, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb06 f30e 	mul.w	r3, r6, lr
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x28a>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e20:	d216      	bcs.n	8000e50 <__udivmoddi4+0x2b0>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d914      	bls.n	8000e50 <__udivmoddi4+0x2b0>
 8000e26:	3e02      	subs	r6, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	1ac9      	subs	r1, r1, r3
 8000e2c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e30:	e738      	b.n	8000ca4 <__udivmoddi4+0x104>
 8000e32:	462e      	mov	r6, r5
 8000e34:	4628      	mov	r0, r5
 8000e36:	e705      	b.n	8000c44 <__udivmoddi4+0xa4>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	e6e3      	b.n	8000c04 <__udivmoddi4+0x64>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6f8      	b.n	8000c32 <__udivmoddi4+0x92>
 8000e40:	454b      	cmp	r3, r9
 8000e42:	d2a9      	bcs.n	8000d98 <__udivmoddi4+0x1f8>
 8000e44:	ebb9 0802 	subs.w	r8, r9, r2
 8000e48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e7a3      	b.n	8000d98 <__udivmoddi4+0x1f8>
 8000e50:	4646      	mov	r6, r8
 8000e52:	e7ea      	b.n	8000e2a <__udivmoddi4+0x28a>
 8000e54:	4620      	mov	r0, r4
 8000e56:	e794      	b.n	8000d82 <__udivmoddi4+0x1e2>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	e7d1      	b.n	8000e00 <__udivmoddi4+0x260>
 8000e5c:	46d0      	mov	r8, sl
 8000e5e:	e77b      	b.n	8000d58 <__udivmoddi4+0x1b8>
 8000e60:	3b02      	subs	r3, #2
 8000e62:	4461      	add	r1, ip
 8000e64:	e732      	b.n	8000ccc <__udivmoddi4+0x12c>
 8000e66:	4630      	mov	r0, r6
 8000e68:	e709      	b.n	8000c7e <__udivmoddi4+0xde>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	e742      	b.n	8000cf6 <__udivmoddi4+0x156>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <Accel_Stepper_SetPin>:
 * dir_port : GPIO port of direction pin
 * dir_pin : gpio pin number of direction pin
 */
void Accel_Stepper_SetPin(Acceleration_t* Accel_stepper, GPIO_TypeDef* step_port,
		uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	80fb      	strh	r3, [r7, #6]
	Accel_stepper->Step_Port = step_port;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
	Accel_stepper->Step_Pin = step_pin;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	88fa      	ldrh	r2, [r7, #6]
 8000e8e:	861a      	strh	r2, [r3, #48]	; 0x30
	Accel_stepper->Dir_Pin = dir_pin;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	8b3a      	ldrh	r2, [r7, #24]
 8000e94:	865a      	strh	r2, [r3, #50]	; 0x32
	Accel_stepper->Dir_Port = dir_port;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <Accel_Stepper_SetTimer>:
/*
 * Set Timer for each motor
 * timer : pointer to timer typedef(Which timer is use for control speed)
 */
void Accel_Stepper_SetTimer(Acceleration_t *Accel_stepper, TIM_HandleTypeDef* timer){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	Accel_stepper->htim = timer;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
}                    
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <Accel_Stepper_TIMIT_Handler>:
/*
 * Accel_Stepper_TIMIT_Handler
 * stepper : Num of which stepper use found @ Stepper_t
 */
void Accel_Stepper_TIMIT_Handler(Acceleration_t *Accel_stepper){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, Accel_stepper->step_delay);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6852      	ldr	r2, [r2, #4]
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6852      	ldr	r2, [r2, #4]
 8000ee0:	60da      	str	r2, [r3, #12]

	switch(Accel_stepper->run_state) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	f200 80eb 	bhi.w	80010c2 <Accel_Stepper_TIMIT_Handler+0x1fe>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <Accel_Stepper_TIMIT_Handler+0x30>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000f05 	.word	0x08000f05
 8000ef8:	08000f23 	.word	0x08000f23
 8000efc:	0800102b 	.word	0x0800102b
 8000f00:	08000fdd 	.word	0x08000fdd
		case STOP:
			Accel_stepper->step_count = 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
			Accel_stepper->rest = 0;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
		     // Stop Timer/Counter 1.
		   	HAL_TIM_Base_Stop_IT(Accel_stepper->htim);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fdfb 	bl	8002b10 <HAL_TIM_Base_Stop_IT>
		   	Accel_stepper->run_status = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
		   	break;
 8000f20:	e0cf      	b.n	80010c2 <Accel_Stepper_TIMIT_Handler+0x1fe>
	    case ACCEL:
	    	Accel_stepper->run_status = 1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f000 ff93 	bl	8001e5e <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
			Accel_stepper->accel_count++;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	615a      	str	r2, [r3, #20]
			Accel_stepper->new_step_delay = Accel_stepper->step_delay - (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * Accel_stepper->accel_count + 1)); //formular new_step_delay=step_delay-((2step_delay+rest)/(4accel_count+1))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69db      	ldr	r3, [r3, #28]
 8000f5c:	440b      	add	r3, r1
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	6949      	ldr	r1, [r1, #20]
 8000f62:	0089      	lsls	r1, r1, #2
 8000f64:	3101      	adds	r1, #1
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	1ad2      	subs	r2, r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	621a      	str	r2, [r3, #32]
			Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * Accel_stepper->accel_count + 1); //new_rest=(2step_delay+rest)(mod(4accel_count+1));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	461a      	mov	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6952      	ldr	r2, [r2, #20]
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	3201      	adds	r2, #1
 8000f86:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f8a:	fb01 f202 	mul.w	r2, r1, r2
 8000f8e:	1a9a      	subs	r2, r3, r2
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	61da      	str	r2, [r3, #28]
	      // Chech if we should start decelration.
			if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d307      	bcc.n	8000fb0 <Accel_Stepper_TIMIT_Handler+0xec>
				Accel_stepper->accel_count = Accel_stepper->decel_val;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	615a      	str	r2, [r3, #20]
				Accel_stepper->run_state = DECEL;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2202      	movs	r2, #2
 8000fac:	705a      	strb	r2, [r3, #1]
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
				Accel_stepper->rest = 0;
				Accel_stepper->run_state = RUN;
			}
			break;
 8000fae:	e083      	b.n	80010b8 <Accel_Stepper_TIMIT_Handler+0x1f4>
			else if(Accel_stepper->new_step_delay <= Accel_stepper->min_step_delay) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6912      	ldr	r2, [r2, #16]
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d87d      	bhi.n	80010b8 <Accel_Stepper_TIMIT_Handler+0x1f4>
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1a      	ldr	r2, [r3, #32]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	621a      	str	r2, [r3, #32]
				Accel_stepper->rest = 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	61da      	str	r2, [r3, #28]
				Accel_stepper->run_state = RUN;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	705a      	strb	r2, [r3, #1]
			break;
 8000fda:	e06d      	b.n	80010b8 <Accel_Stepper_TIMIT_Handler+0x1f4>

	    case RUN:
	    	Accel_stepper->run_status = 1;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000fea:	4619      	mov	r1, r3
 8000fec:	4610      	mov	r0, r2
 8000fee:	f000 ff36 	bl	8001e5e <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
	    	Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	461a      	mov	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	621a      	str	r2, [r3, #32]
//	         Check if we should start deceleration.
			 if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699a      	ldr	r2, [r3, #24]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	429a      	cmp	r2, r3
 8001010:	d354      	bcc.n	80010bc <Accel_Stepper_TIMIT_Handler+0x1f8>
				 Accel_stepper->accel_count = Accel_stepper->decel_val;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	615a      	str	r2, [r3, #20]
//	         Start deceleration with same delay as accel ended with.
				 Accel_stepper->new_step_delay = Accel_stepper->last_accel_delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	621a      	str	r2, [r3, #32]
				 Accel_stepper->run_state = DECEL;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2202      	movs	r2, #2
 8001026:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001028:	e048      	b.n	80010bc <Accel_Stepper_TIMIT_Handler+0x1f8>

	    case DECEL:
	    	Accel_stepper->run_status = 1;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f000 ff0f 	bl	8001e5e <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	619a      	str	r2, [r3, #24]
			 Accel_stepper->accel_count++;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	615a      	str	r2, [r3, #20]
			 Accel_stepper->new_step_delay = Accel_stepper->step_delay + (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * abs(Accel_stepper->accel_count) + 1));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4619      	mov	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	440b      	add	r3, r1
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	6949      	ldr	r1, [r1, #20]
 800106a:	2900      	cmp	r1, #0
 800106c:	bfb8      	it	lt
 800106e:	4249      	neglt	r1, r1
 8001070:	0089      	lsls	r1, r1, #2
 8001072:	3101      	adds	r1, #1
 8001074:	fbb3 f3f1 	udiv	r3, r3, r1
 8001078:	441a      	add	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	621a      	str	r2, [r3, #32]
			 Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * (long) abs(Accel_stepper->accel_count) + 1);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4413      	add	r3, r2
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6952      	ldr	r2, [r2, #20]
 8001090:	2a00      	cmp	r2, #0
 8001092:	bfb8      	it	lt
 8001094:	4252      	neglt	r2, r2
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	3201      	adds	r2, #1
 800109a:	fbb3 f1f2 	udiv	r1, r3, r2
 800109e:	fb01 f202 	mul.w	r2, r1, r2
 80010a2:	1a9a      	subs	r2, r3, r2
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	61da      	str	r2, [r3, #28]
//	         Check if we at last step
			 if(Accel_stepper->accel_count >= 0){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db07      	blt.n	80010c0 <Accel_Stepper_TIMIT_Handler+0x1fc>
				 Accel_stepper->run_state = STOP;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 80010b6:	e003      	b.n	80010c0 <Accel_Stepper_TIMIT_Handler+0x1fc>
			break;
 80010b8:	bf00      	nop
 80010ba:	e002      	b.n	80010c2 <Accel_Stepper_TIMIT_Handler+0x1fe>
			 break;
 80010bc:	bf00      	nop
 80010be:	e000      	b.n	80010c2 <Accel_Stepper_TIMIT_Handler+0x1fe>
			 break;
 80010c0:	bf00      	nop
	  }
	 Accel_stepper->step_delay = Accel_stepper->new_step_delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1a      	ldr	r2, [r3, #32]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
//		  return rc;
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	0000      	movs	r0, r0
	...

080010d8 <Accel_Stepper_Move>:
 * accel : acceleration
 * decel : deceleration
 * rpm : speed at run state
 */
void Accel_Stepper_Move(Acceleration_t *Accel_stepper, signed int step, unsigned int accel, unsigned int decel, unsigned int rpm)//acc*100
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	603b      	str	r3, [r7, #0]

	unsigned int max_step_lim; //! Number of steps before we hit max speed.
	unsigned int accel_lim;//! Number of steps before we must start deceleration (if accel does not hit max speed).
	unsigned int speed = 2 * 3.14159 * rpm/60; //rd/s
 80010e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010e8:	f7ff f9d0 	bl	800048c <__aeabi_ui2d>
 80010ec:	a387      	add	r3, pc, #540	; (adr r3, 800130c <Accel_Stepper_Move+0x234>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fa45 	bl	8000580 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b7f      	ldr	r3, [pc, #508]	; (8001300 <Accel_Stepper_Move+0x228>)
 8001104:	f7ff fb66 	bl	80007d4 <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fd0e 	bl	8000b30 <__aeabi_d2uiz>
 8001114:	4603      	mov	r3, r0
 8001116:	617b      	str	r3, [r7, #20]
	Accel_stepper->step_count = 0;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
	if(step>0){
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dd0a      	ble.n	800113a <Accel_Stepper_Move+0x62>
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 1);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	f000 fe7c 	bl	8001e2c <HAL_GPIO_WritePin>
		step = 2*step;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
//    srd.dir = CW;
	}
//   Set direction from sign on step value.
	if(step < 0){
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	da0d      	bge.n	800115c <Accel_Stepper_Move+0x84>
//    srd.dir = CCW;
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 0);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	f000 fe6e 	bl	8001e2c <HAL_GPIO_WritePin>
		step = -2*step;
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	4613      	mov	r3, r2
 8001154:	07db      	lsls	r3, r3, #31
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
	}


//  If moving only 1 step.
	if(step == 1){
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d110      	bne.n	8001184 <Accel_Stepper_Move+0xac>

//      Move one step...
		Accel_stepper->accel_count = -1;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001168:	615a      	str	r2, [r3, #20]
//      ...in DECEL state.
		Accel_stepper->run_state = DECEL;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2202      	movs	r2, #2
 800116e:	705a      	strb	r2, [r3, #1]
//      Just a short delay so main() can act on 'running'.
		Accel_stepper->step_delay = 1000;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001176:	605a      	str	r2, [r3, #4]
//      status.running = TRUE;
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fc57 	bl	8002a30 <HAL_TIM_Base_Start_IT>
		Accel_stepper->accel_count = 0;
//    status.running = TRUE;
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
	}
}
 8001182:	e0ad      	b.n	80012e0 <Accel_Stepper_Move+0x208>
	else if(step != 0){
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80aa 	beq.w	80012e0 <Accel_Stepper_Move+0x208>
		Accel_stepper->min_step_delay = ALPHA*TIM_FREQ/speed;
 800118c:	6978      	ldr	r0, [r7, #20]
 800118e:	f7ff f97d 	bl	800048c <__aeabi_ui2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	a154      	add	r1, pc, #336	; (adr r1, 80012e8 <Accel_Stepper_Move+0x210>)
 8001198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800119c:	f7ff fb1a 	bl	80007d4 <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fc9a 	bl	8000ae0 <__aeabi_d2iz>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	611a      	str	r2, [r3, #16]
		Accel_stepper->step_delay = (TIM_FREQ_SCALE * sqrt(A_SQ / accel))/10000;;
 80011b2:	4a54      	ldr	r2, [pc, #336]	; (8001304 <Accel_Stepper_Move+0x22c>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f966 	bl	800048c <__aeabi_ui2d>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	ec43 2b10 	vmov	d0, r2, r3
 80011c8:	f002 f8c4 	bl	8003354 <sqrt>
 80011cc:	ec51 0b10 	vmov	r0, r1, d0
 80011d0:	a347      	add	r3, pc, #284	; (adr r3, 80012f0 <Accel_Stepper_Move+0x218>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff f9d3 	bl	8000580 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	a345      	add	r3, pc, #276	; (adr r3, 80012f8 <Accel_Stepper_Move+0x220>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff faf4 	bl	80007d4 <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fc9c 	bl	8000b30 <__aeabi_d2uiz>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	605a      	str	r2, [r3, #4]
		max_step_lim = (long)speed*speed*10000/(long)(((long)A_x20000*accel)/100);
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fb03 f303 	mul.w	r3, r3, r3
 8001204:	f242 7210 	movw	r2, #10000	; 0x2710
 8001208:	fb03 f202 	mul.w	r2, r3, r2
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f44f 711d 	mov.w	r1, #628	; 0x274
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	493c      	ldr	r1, [pc, #240]	; (8001308 <Accel_Stepper_Move+0x230>)
 8001218:	fba1 1303 	umull	r1, r3, r1, r3
 800121c:	095b      	lsrs	r3, r3, #5
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	61fb      	str	r3, [r7, #28]
		if(max_step_lim == 0){
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <Accel_Stepper_Move+0x156>
			max_step_lim = 1;
 800122a:	2301      	movs	r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
		accel_lim = ((long)step*decel) / (accel+decel);
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	fb03 f202 	mul.w	r2, r3, r2
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	440b      	add	r3, r1
 800123c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001240:	61bb      	str	r3, [r7, #24]
		if(accel_lim == 0){
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d101      	bne.n	800124c <Accel_Stepper_Move+0x174>
			accel_lim = 1;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
		if(accel_lim <= max_step_lim){
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	429a      	cmp	r2, r3
 8001252:	d806      	bhi.n	8001262 <Accel_Stepper_Move+0x18a>
			Accel_stepper->decel_val = accel_lim - step;//decel_val: step for decel)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	e00a      	b.n	8001278 <Accel_Stepper_Move+0x1a0>
			Accel_stepper->decel_val = -(((long)(max_step_lim*accel))/decel);
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	fb03 f202 	mul.w	r2, r3, r2
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001270:	425b      	negs	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	60da      	str	r2, [r3, #12]
		if(Accel_stepper->decel_val == 0){
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d103      	bne.n	8001288 <Accel_Stepper_Move+0x1b0>
			Accel_stepper->decel_val = -1;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001286:	60da      	str	r2, [r3, #12]
		Accel_stepper->decel_start = step + Accel_stepper->decel_val;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4413      	add	r3, r2
 8001290:	461a      	mov	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	609a      	str	r2, [r3, #8]
		if(Accel_stepper->step_delay <= Accel_stepper->min_step_delay){
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	6912      	ldr	r2, [r2, #16]
 800129e:	4293      	cmp	r3, r2
 80012a0:	d808      	bhi.n	80012b4 <Accel_Stepper_Move+0x1dc>
			Accel_stepper->step_delay = Accel_stepper->min_step_delay;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
			Accel_stepper->run_state = RUN;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2203      	movs	r2, #3
 80012b0:	705a      	strb	r2, [r3, #1]
 80012b2:	e002      	b.n	80012ba <Accel_Stepper_Move+0x1e2>
			Accel_stepper->run_state = ACCEL;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2201      	movs	r2, #1
 80012b8:	705a      	strb	r2, [r3, #1]
		Accel_stepper->accel_count = 0;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d4:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 fba8 	bl	8002a30 <HAL_TIM_Base_Start_IT>
}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	99999999 	.word	0x99999999
 80012ec:	40deadf9 	.word	0x40deadf9
 80012f0:	00000000 	.word	0x00000000
 80012f4:	4124a140 	.word	0x4124a140
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40c38800 	.word	0x40c38800
 8001300:	404e0000 	.word	0x404e0000
 8001304:	25735f2f 	.word	0x25735f2f
 8001308:	51eb851f 	.word	0x51eb851f
 800130c:	f01b866e 	.word	0xf01b866e
 8001310:	401921f9 	.word	0x401921f9

08001314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_GPIO_Init+0x7c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <MX_GPIO_Init+0x7c>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_GPIO_Init+0x7c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_GPIO_Init+0x7c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <MX_GPIO_Init+0x7c>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_GPIO_Init+0x7c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	21c0      	movs	r1, #192	; 0xc0
 8001366:	480b      	ldr	r0, [pc, #44]	; (8001394 <MX_GPIO_Init+0x80>)
 8001368:	f000 fd60 	bl	8001e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800136c:	23c0      	movs	r3, #192	; 0xc0
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4619      	mov	r1, r3
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_GPIO_Init+0x80>)
 8001384:	f000 fbbe 	bl	8001b04 <HAL_GPIO_Init>

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139e:	f000 fa2d 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a2:	f000 f82f 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a6:	f7ff ffb5 	bl	8001314 <MX_GPIO_Init>
  MX_TIM9_Init();
 80013aa:	f000 f97d 	bl	80016a8 <MX_TIM9_Init>
  MX_TIM4_Init();
 80013ae:	f000 f92d 	bl	800160c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim9);
  //HAL_TIM_Base_Start_IT(&htim4);
  Accel_Stepper_SetPin(&Stepper1, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_7);
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <main+0x5c>)
 80013b8:	2240      	movs	r2, #64	; 0x40
 80013ba:	490e      	ldr	r1, [pc, #56]	; (80013f4 <main+0x5c>)
 80013bc:	480e      	ldr	r0, [pc, #56]	; (80013f8 <main+0x60>)
 80013be:	f7ff fd59 	bl	8000e74 <Accel_Stepper_SetPin>
  Accel_Stepper_SetTimer(&Stepper1, &htim4);
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <main+0x64>)
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <main+0x60>)
 80013c6:	f7ff fd6f 	bl	8000ea8 <Accel_Stepper_SetTimer>
	      {
	    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
	        microDelay(stepDelay);
	      }
	      HAL_Delay(1000);*/
	  	  if(Stepper1.run_status == 0){
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <main+0x60>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1fb      	bne.n	80013ca <main+0x32>
	  		  Accel_Stepper_Move(&Stepper1, set_theta1, 1000, 1000, 500);
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <main+0x68>)
 80013d4:	6819      	ldr	r1, [r3, #0]
 80013d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <main+0x60>)
 80013e6:	f7ff fe77 	bl	80010d8 <Accel_Stepper_Move>
	  		  set_theta1 = 0;//reset steps to 0 (prevent re-run after done)
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <main+0x68>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	  	  if(Stepper1.run_status == 0){
 80013f0:	e7eb      	b.n	80013ca <main+0x32>
 80013f2:	bf00      	nop
 80013f4:	40020000 	.word	0x40020000
 80013f8:	20000090 	.word	0x20000090
 80013fc:	200000c8 	.word	0x200000c8
 8001400:	20000000 	.word	0x20000000

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b094      	sub	sp, #80	; 0x50
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	2234      	movs	r2, #52	; 0x34
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f001 ff96 	bl	8003344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <SystemClock_Config+0xdc>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <SystemClock_Config+0xdc>)
 8001432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	; 0x40
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <SystemClock_Config+0xdc>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <SystemClock_Config+0xe0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <SystemClock_Config+0xe0>)
 800144e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <SystemClock_Config+0xe0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001460:	2302      	movs	r3, #2
 8001462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001468:	2310      	movs	r3, #16
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146c:	2302      	movs	r3, #2
 800146e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001470:	2300      	movs	r3, #0
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001474:	2308      	movs	r3, #8
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001478:	23b4      	movs	r3, #180	; 0xb4
 800147a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800147c:	2302      	movs	r3, #2
 800147e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001480:	2302      	movs	r3, #2
 8001482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001484:	2302      	movs	r3, #2
 8001486:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4618      	mov	r0, r3
 800148e:	f000 ffe1 	bl	8002454 <HAL_RCC_OscConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001498:	f000 f83a 	bl	8001510 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800149c:	f000 fcfa 	bl	8001e94 <HAL_PWREx_EnableOverDrive>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014a6:	f000 f833 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2302      	movs	r3, #2
 80014b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	2105      	movs	r1, #5
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fd33 	bl	8001f34 <HAL_RCC_ClockConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80014d4:	f000 f81c 	bl	8001510 <Error_Handler>
  }
}
 80014d8:	bf00      	nop
 80014da:	3750      	adds	r7, #80	; 0x50
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == TIM4){//stepper1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d102      	bne.n	8001500 <HAL_TIM_PeriodElapsedCallback+0x18>
		  Accel_Stepper_TIMIT_Handler(&Stepper1);
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014fc:	f7ff fce2 	bl	8000ec4 <Accel_Stepper_TIMIT_Handler>

	  }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40000800 	.word	0x40000800
 800150c:	20000090 	.word	0x20000090

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x8>
	...

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_MspInit+0x4c>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x4c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f000 f972 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80015c6:	f001 fad2 	bl	8002b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000110 	.word	0x20000110

080015d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <TIM4_IRQHandler+0x10>)
 80015da:	f001 fac8 	bl	8002b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200000c8 	.word	0x200000c8

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SystemInit+0x20>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <SystemInit+0x20>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_TIM4_Init+0x94>)
 800162a:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <MX_TIM4_Init+0x98>)
 800162c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 89;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001630:	2259      	movs	r2, #89	; 0x59
 8001632:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_TIM4_Init+0x94>)
 800163c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001640:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM4_Init+0x94>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164e:	4814      	ldr	r0, [pc, #80]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001650:	f001 f99e 	bl	8002990 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800165a:	f7ff ff59 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_TIM4_Init+0x94>)
 800166c:	f001 fb87 	bl	8002d7e <HAL_TIM_ConfigClockSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001676:	f7ff ff4b 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_TIM4_Init+0x94>)
 8001688:	f001 fda2 	bl	80031d0 <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001692:	f7ff ff3d 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200000c8 	.word	0x200000c8
 80016a4:	40000800 	.word	0x40000800

080016a8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	463b      	mov	r3, r7
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <MX_TIM9_Init+0x6c>)
 80016bc:	4a16      	ldr	r2, [pc, #88]	; (8001718 <MX_TIM9_Init+0x70>)
 80016be:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 179;
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_TIM9_Init+0x6c>)
 80016c2:	22b3      	movs	r2, #179	; 0xb3
 80016c4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <MX_TIM9_Init+0x6c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0xffff-1;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_TIM9_Init+0x6c>)
 80016ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016d2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_TIM9_Init+0x6c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_TIM9_Init+0x6c>)
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <MX_TIM9_Init+0x6c>)
 80016e2:	f001 f955 	bl	8002990 <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80016ec:	f7ff ff10 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	4619      	mov	r1, r3
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <MX_TIM9_Init+0x6c>)
 80016fc:	f001 fb3f 	bl	8002d7e <HAL_TIM_ConfigClockSource>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001706:	f7ff ff03 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000110 	.word	0x20000110
 8001718:	40014000 	.word	0x40014000

0800171c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1c      	ldr	r2, [pc, #112]	; (800179c <HAL_TIM_Base_MspInit+0x80>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d116      	bne.n	800175c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	201e      	movs	r0, #30
 8001750:	f000 f9a1 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001754:	201e      	movs	r0, #30
 8001756:	f000 f9ba 	bl	8001ace <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800175a:	e01a      	b.n	8001792 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM9)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a10      	ldr	r2, [pc, #64]	; (80017a4 <HAL_TIM_Base_MspInit+0x88>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d115      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_TIM_Base_MspInit+0x84>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	2018      	movs	r0, #24
 8001788:	f000 f985 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800178c:	2018      	movs	r0, #24
 800178e:	f000 f99e 	bl	8001ace <HAL_NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40000800 	.word	0x40000800
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40014000 	.word	0x40014000

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017d2:	f7ff ff09 	bl	80015e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f001 fd91 	bl	80032fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff fddd 	bl	8001398 <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017ec:	08003548 	.word	0x08003548
  ldr r2, =_sbss
 80017f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017f4:	2000015c 	.word	0x2000015c

080017f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_Init+0x40>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_Init+0x40>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_Init+0x40>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 f92b 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f808 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fe74 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x54>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_InitTick+0x58>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f943 	bl	8001aea <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800187c:	f000 f90b 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <HAL_InitTick+0x5c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000004 	.word	0x20000004
 8001898:	2000000c 	.word	0x2000000c
 800189c:	20000008 	.word	0x20000008

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2000000c 	.word	0x2000000c
 80018c4:	20000158 	.word	0x20000158

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000158 	.word	0x20000158

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a60:	f7ff ff8e 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff29 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff3e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff8e 	bl	80019d4 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff31 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa2 	bl	8001a3c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e165      	b.n	8001dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f040 8154 	bne.w	8001de6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d005      	beq.n	8001b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d130      	bne.n	8001bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d017      	beq.n	8001bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d123      	bne.n	8001c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	69b9      	ldr	r1, [r7, #24]
 8001c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80ae 	beq.w	8001de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_GPIO_Init+0x300>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a5c      	ldr	r2, [pc, #368]	; (8001e04 <HAL_GPIO_Init+0x300>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_GPIO_Init+0x300>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca6:	4a58      	ldr	r2, [pc, #352]	; (8001e08 <HAL_GPIO_Init+0x304>)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4f      	ldr	r2, [pc, #316]	; (8001e0c <HAL_GPIO_Init+0x308>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d025      	beq.n	8001d1e <HAL_GPIO_Init+0x21a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_GPIO_Init+0x30c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x216>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_GPIO_Init+0x310>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x212>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_GPIO_Init+0x314>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x20e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_GPIO_Init+0x318>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x20a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4a      	ldr	r2, [pc, #296]	; (8001e20 <HAL_GPIO_Init+0x31c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x206>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x320>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x202>
 8001d02:	2306      	movs	r3, #6
 8001d04:	e00c      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e00a      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	e008      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d12:	2303      	movs	r3, #3
 8001d14:	e004      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	f002 0203 	and.w	r2, r2, #3
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d30:	4935      	ldr	r1, [pc, #212]	; (8001e08 <HAL_GPIO_Init+0x304>)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d62:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d8c:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3301      	adds	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b0f      	cmp	r3, #15
 8001df0:	f67f ae96 	bls.w	8001b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40021400 	.word	0x40021400
 8001e24:	40021800 	.word	0x40021800
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e3c:	787b      	ldrb	r3, [r7, #1]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4a:	887b      	ldrh	r3, [r7, #2]
 8001e4c:	041a      	lsls	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	619a      	str	r2, [r3, #24]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	041a      	lsls	r2, r3, #16
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	400b      	ands	r3, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_PWREx_EnableOverDrive+0x90>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec0:	f7ff fd02 	bl	80018c8 <HAL_GetTick>
 8001ec4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ec6:	e009      	b.n	8001edc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ec8:	f7ff fcfe 	bl	80018c8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed6:	d901      	bls.n	8001edc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e01f      	b.n	8001f1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d1ee      	bne.n	8001ec8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef0:	f7ff fcea 	bl	80018c8 <HAL_GetTick>
 8001ef4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ef6:	e009      	b.n	8001f0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ef8:	f7ff fce6 	bl	80018c8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f06:	d901      	bls.n	8001f0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e007      	b.n	8001f1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f18:	d1ee      	bne.n	8001ef8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	420e0040 	.word	0x420e0040
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	420e0044 	.word	0x420e0044

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0cc      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d90c      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b65      	ldr	r3, [pc, #404]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0b8      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f88:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4a58      	ldr	r2, [pc, #352]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fac:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	494d      	ldr	r1, [pc, #308]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d044      	beq.n	8002054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d119      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e07f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff2:	4b3f      	ldr	r3, [pc, #252]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e067      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4934      	ldr	r1, [pc, #208]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002024:	f7ff fc50 	bl	80018c8 <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7ff fc4c 	bl	80018c8 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e04f      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 020c 	and.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1eb      	bne.n	800202c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d20c      	bcs.n	800207c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e032      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4916      	ldr	r1, [pc, #88]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a6:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ba:	f000 f821 	bl	8002100 <HAL_RCC_GetSysClockFreq>
 80020be:	4602      	mov	r2, r0
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	490a      	ldr	r1, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	5ccb      	ldrb	r3, [r1, r3]
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x1c8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fbb0 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023c00 	.word	0x40023c00
 80020f0:	40023800 	.word	0x40023800
 80020f4:	08003528 	.word	0x08003528
 80020f8:	20000004 	.word	0x20000004
 80020fc:	20000008 	.word	0x20000008

08002100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002104:	b0a6      	sub	sp, #152	; 0x98
 8002106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002126:	4bc8      	ldr	r3, [pc, #800]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b0c      	cmp	r3, #12
 8002130:	f200 817e 	bhi.w	8002430 <HAL_RCC_GetSysClockFreq+0x330>
 8002134:	a201      	add	r2, pc, #4	; (adr r2, 800213c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213a:	bf00      	nop
 800213c:	08002171 	.word	0x08002171
 8002140:	08002431 	.word	0x08002431
 8002144:	08002431 	.word	0x08002431
 8002148:	08002431 	.word	0x08002431
 800214c:	08002179 	.word	0x08002179
 8002150:	08002431 	.word	0x08002431
 8002154:	08002431 	.word	0x08002431
 8002158:	08002431 	.word	0x08002431
 800215c:	08002181 	.word	0x08002181
 8002160:	08002431 	.word	0x08002431
 8002164:	08002431 	.word	0x08002431
 8002168:	08002431 	.word	0x08002431
 800216c:	080022eb 	.word	0x080022eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4bb6      	ldr	r3, [pc, #728]	; (800244c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002176:	e15f      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002178:	4bb5      	ldr	r3, [pc, #724]	; (8002450 <HAL_RCC_GetSysClockFreq+0x350>)
 800217a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800217e:	e15b      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002180:	4bb1      	ldr	r3, [pc, #708]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800218c:	4bae      	ldr	r3, [pc, #696]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d031      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002198:	4bab      	ldr	r3, [pc, #684]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	2200      	movs	r2, #0
 80021a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80021a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021aa:	663b      	str	r3, [r7, #96]	; 0x60
 80021ac:	2300      	movs	r3, #0
 80021ae:	667b      	str	r3, [r7, #100]	; 0x64
 80021b0:	4ba7      	ldr	r3, [pc, #668]	; (8002450 <HAL_RCC_GetSysClockFreq+0x350>)
 80021b2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80021b6:	462a      	mov	r2, r5
 80021b8:	fb03 f202 	mul.w	r2, r3, r2
 80021bc:	2300      	movs	r3, #0
 80021be:	4621      	mov	r1, r4
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	4aa2      	ldr	r2, [pc, #648]	; (8002450 <HAL_RCC_GetSysClockFreq+0x350>)
 80021c8:	4621      	mov	r1, r4
 80021ca:	fba1 1202 	umull	r1, r2, r1, r2
 80021ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021d0:	460a      	mov	r2, r1
 80021d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80021d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80021d6:	4413      	add	r3, r2
 80021d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021de:	2200      	movs	r2, #0
 80021e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80021e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80021ec:	f7fe fcc0 	bl	8000b70 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4613      	mov	r3, r2
 80021f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021fa:	e064      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fc:	4b92      	ldr	r3, [pc, #584]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	2200      	movs	r2, #0
 8002204:	653b      	str	r3, [r7, #80]	; 0x50
 8002206:	657a      	str	r2, [r7, #84]	; 0x54
 8002208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800220a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800220e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002210:	2300      	movs	r3, #0
 8002212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002214:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002218:	4622      	mov	r2, r4
 800221a:	462b      	mov	r3, r5
 800221c:	f04f 0000 	mov.w	r0, #0
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	0159      	lsls	r1, r3, #5
 8002226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222a:	0150      	lsls	r0, r2, #5
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4621      	mov	r1, r4
 8002232:	1a51      	subs	r1, r2, r1
 8002234:	6139      	str	r1, [r7, #16]
 8002236:	4629      	mov	r1, r5
 8002238:	eb63 0301 	sbc.w	r3, r3, r1
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800224a:	4659      	mov	r1, fp
 800224c:	018b      	lsls	r3, r1, #6
 800224e:	4651      	mov	r1, sl
 8002250:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002254:	4651      	mov	r1, sl
 8002256:	018a      	lsls	r2, r1, #6
 8002258:	4651      	mov	r1, sl
 800225a:	ebb2 0801 	subs.w	r8, r2, r1
 800225e:	4659      	mov	r1, fp
 8002260:	eb63 0901 	sbc.w	r9, r3, r1
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002270:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002274:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002278:	4690      	mov	r8, r2
 800227a:	4699      	mov	r9, r3
 800227c:	4623      	mov	r3, r4
 800227e:	eb18 0303 	adds.w	r3, r8, r3
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	462b      	mov	r3, r5
 8002286:	eb49 0303 	adc.w	r3, r9, r3
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002298:	4629      	mov	r1, r5
 800229a:	028b      	lsls	r3, r1, #10
 800229c:	4621      	mov	r1, r4
 800229e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a2:	4621      	mov	r1, r4
 80022a4:	028a      	lsls	r2, r1, #10
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ae:	2200      	movs	r2, #0
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
 80022b2:	647a      	str	r2, [r7, #68]	; 0x44
 80022b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022b8:	f7fe fc5a 	bl	8000b70 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	3301      	adds	r3, #1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80022d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80022e8:	e0a6      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ea:	4b57      	ldr	r3, [pc, #348]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f6:	4b54      	ldr	r3, [pc, #336]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d02a      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	2200      	movs	r2, #0
 800230a:	63bb      	str	r3, [r7, #56]	; 0x38
 800230c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002310:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002314:	2100      	movs	r1, #0
 8002316:	4b4e      	ldr	r3, [pc, #312]	; (8002450 <HAL_RCC_GetSysClockFreq+0x350>)
 8002318:	fb03 f201 	mul.w	r2, r3, r1
 800231c:	2300      	movs	r3, #0
 800231e:	fb00 f303 	mul.w	r3, r0, r3
 8002322:	4413      	add	r3, r2
 8002324:	4a4a      	ldr	r2, [pc, #296]	; (8002450 <HAL_RCC_GetSysClockFreq+0x350>)
 8002326:	fba0 1202 	umull	r1, r2, r0, r2
 800232a:	677a      	str	r2, [r7, #116]	; 0x74
 800232c:	460a      	mov	r2, r1
 800232e:	673a      	str	r2, [r7, #112]	; 0x70
 8002330:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002332:	4413      	add	r3, r2
 8002334:	677b      	str	r3, [r7, #116]	; 0x74
 8002336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233a:	2200      	movs	r2, #0
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
 800233e:	637a      	str	r2, [r7, #52]	; 0x34
 8002340:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002344:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002348:	f7fe fc12 	bl	8000b70 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4613      	mov	r3, r2
 8002352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002356:	e05b      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002358:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	099b      	lsrs	r3, r3, #6
 800235e:	2200      	movs	r2, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
 8002362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002374:	4642      	mov	r2, r8
 8002376:	464b      	mov	r3, r9
 8002378:	f04f 0000 	mov.w	r0, #0
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	0159      	lsls	r1, r3, #5
 8002382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002386:	0150      	lsls	r0, r2, #5
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4641      	mov	r1, r8
 800238e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002392:	4649      	mov	r1, r9
 8002394:	eb63 0b01 	sbc.w	fp, r3, r1
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023ac:	ebb2 040a 	subs.w	r4, r2, sl
 80023b0:	eb63 050b 	sbc.w	r5, r3, fp
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	00eb      	lsls	r3, r5, #3
 80023be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c2:	00e2      	lsls	r2, r4, #3
 80023c4:	4614      	mov	r4, r2
 80023c6:	461d      	mov	r5, r3
 80023c8:	4643      	mov	r3, r8
 80023ca:	18e3      	adds	r3, r4, r3
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	464b      	mov	r3, r9
 80023d0:	eb45 0303 	adc.w	r3, r5, r3
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e2:	4629      	mov	r1, r5
 80023e4:	028b      	lsls	r3, r1, #10
 80023e6:	4621      	mov	r1, r4
 80023e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023ec:	4621      	mov	r1, r4
 80023ee:	028a      	lsls	r2, r1, #10
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023f8:	2200      	movs	r2, #0
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	61fa      	str	r2, [r7, #28]
 80023fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002402:	f7fe fbb5 	bl	8000b70 <__aeabi_uldivmod>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4613      	mov	r3, r2
 800240c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_RCC_GetSysClockFreq+0x348>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0f1b      	lsrs	r3, r3, #28
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800241e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800242e:	e003      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002436:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800243c:	4618      	mov	r0, r3
 800243e:	3798      	adds	r7, #152	; 0x98
 8002440:	46bd      	mov	sp, r7
 8002442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	00f42400 	.word	0x00f42400
 8002450:	017d7840 	.word	0x017d7840

08002454 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e28d      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8083 	beq.w	800257a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002474:	4b94      	ldr	r3, [pc, #592]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b04      	cmp	r3, #4
 800247e:	d019      	beq.n	80024b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002480:	4b91      	ldr	r3, [pc, #580]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002488:	2b08      	cmp	r3, #8
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800248c:	4b8e      	ldr	r3, [pc, #568]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002498:	d00c      	beq.n	80024b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4b8b      	ldr	r3, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d112      	bne.n	80024cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4b88      	ldr	r3, [pc, #544]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b2:	d10b      	bne.n	80024cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	4b84      	ldr	r3, [pc, #528]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d05b      	beq.n	8002578 <HAL_RCC_OscConfig+0x124>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d157      	bne.n	8002578 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e25a      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d106      	bne.n	80024e4 <HAL_RCC_OscConfig+0x90>
 80024d6:	4b7c      	ldr	r3, [pc, #496]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7b      	ldr	r2, [pc, #492]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e01d      	b.n	8002520 <HAL_RCC_OscConfig+0xcc>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0xb4>
 80024ee:	4b76      	ldr	r3, [pc, #472]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a75      	ldr	r2, [pc, #468]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a72      	ldr	r2, [pc, #456]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0xcc>
 8002508:	4b6f      	ldr	r3, [pc, #444]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6e      	ldr	r2, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b6c      	ldr	r3, [pc, #432]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a6b      	ldr	r2, [pc, #428]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7ff f9ce 	bl	80018c8 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7ff f9ca 	bl	80018c8 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e21f      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0xdc>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7ff f9ba 	bl	80018c8 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7ff f9b6 	bl	80018c8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e20b      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x104>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d06f      	beq.n	8002666 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002586:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b00      	cmp	r3, #0
 8002590:	d017      	beq.n	80025c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002592:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800259a:	2b08      	cmp	r3, #8
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d11c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d116      	bne.n	80025f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x186>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e1d3      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4937      	ldr	r1, [pc, #220]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	e03a      	b.n	8002666 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f8:	4b34      	ldr	r3, [pc, #208]	; (80026cc <HAL_RCC_OscConfig+0x278>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7ff f963 	bl	80018c8 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002606:	f7ff f95f 	bl	80018c8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1b4      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4925      	ldr	r1, [pc, #148]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
 8002638:	e015      	b.n	8002666 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_RCC_OscConfig+0x278>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7ff f942 	bl	80018c8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002648:	f7ff f93e 	bl	80018c8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e193      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d036      	beq.n	80026e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7ff f922 	bl	80018c8 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002688:	f7ff f91e 	bl	80018c8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e173      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800269c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x234>
 80026a6:	e01b      	b.n	80026e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff f90b 	bl	80018c8 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	e00e      	b.n	80026d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b6:	f7ff f907 	bl	80018c8 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d907      	bls.n	80026d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e15c      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
 80026c8:	40023800 	.word	0x40023800
 80026cc:	42470000 	.word	0x42470000
 80026d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	4b8a      	ldr	r3, [pc, #552]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 80026d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ea      	bne.n	80026b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8097 	beq.w	800281c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f2:	4b83      	ldr	r3, [pc, #524]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10f      	bne.n	800271e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b7f      	ldr	r3, [pc, #508]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a7e      	ldr	r2, [pc, #504]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b7c      	ldr	r3, [pc, #496]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b79      	ldr	r3, [pc, #484]	; (8002904 <HAL_RCC_OscConfig+0x4b0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d118      	bne.n	800275c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272a:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0x4b0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a75      	ldr	r2, [pc, #468]	; (8002904 <HAL_RCC_OscConfig+0x4b0>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002736:	f7ff f8c7 	bl	80018c8 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273e:	f7ff f8c3 	bl	80018c8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e118      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	4b6c      	ldr	r3, [pc, #432]	; (8002904 <HAL_RCC_OscConfig+0x4b0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x31e>
 8002764:	4b66      	ldr	r3, [pc, #408]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	4a65      	ldr	r2, [pc, #404]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6713      	str	r3, [r2, #112]	; 0x70
 8002770:	e01c      	b.n	80027ac <HAL_RCC_OscConfig+0x358>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b05      	cmp	r3, #5
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x340>
 800277a:	4b61      	ldr	r3, [pc, #388]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	4a60      	ldr	r2, [pc, #384]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	6713      	str	r3, [r2, #112]	; 0x70
 8002786:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	4a5d      	ldr	r2, [pc, #372]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0x358>
 8002794:	4b5a      	ldr	r3, [pc, #360]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a59      	ldr	r2, [pc, #356]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a56      	ldr	r2, [pc, #344]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d015      	beq.n	80027e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7ff f888 	bl	80018c8 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7ff f884 	bl	80018c8 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0d7      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d2:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0ee      	beq.n	80027bc <HAL_RCC_OscConfig+0x368>
 80027de:	e014      	b.n	800280a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7ff f872 	bl	80018c8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7ff f86e 	bl	80018c8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e0c1      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fe:	4b40      	ldr	r3, [pc, #256]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ee      	bne.n	80027e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80ad 	beq.w	8002980 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002826:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d060      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d145      	bne.n	80028c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283a:	4b33      	ldr	r3, [pc, #204]	; (8002908 <HAL_RCC_OscConfig+0x4b4>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7ff f842 	bl	80018c8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002848:	f7ff f83e 	bl	80018c8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e093      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	3b01      	subs	r3, #1
 8002880:	041b      	lsls	r3, r3, #16
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	071b      	lsls	r3, r3, #28
 8002892:	491b      	ldr	r1, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x4b4>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7ff f813 	bl	80018c8 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a6:	f7ff f80f 	bl	80018c8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e064      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x452>
 80028c4:	e05c      	b.n	8002980 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_RCC_OscConfig+0x4b4>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe fffc 	bl	80018c8 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe fff8 	bl	80018c8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e04d      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCC_OscConfig+0x4ac>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x480>
 80028f2:	e045      	b.n	8002980 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e040      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000
 8002908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800290c:	4b1f      	ldr	r3, [pc, #124]	; (800298c <HAL_RCC_OscConfig+0x538>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d030      	beq.n	800297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d129      	bne.n	800297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d122      	bne.n	800297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002944:	4293      	cmp	r3, r2
 8002946:	d119      	bne.n	800297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	3b01      	subs	r3, #1
 8002956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d10f      	bne.n	800297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800

08002990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e041      	b.n	8002a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe feb0 	bl	800171c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f000 fac4 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d001      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e04e      	b.n	8002ae6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a23      	ldr	r2, [pc, #140]	; (8002af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d022      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x80>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a72:	d01d      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x80>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d018      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x80>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x80>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00e      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x80>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d009      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x80>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_TIM_Base_Start_IT+0x80>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a18      	ldr	r2, [pc, #96]	; (8002b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d010      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad2:	e007      	b.n	8002ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800
 8002b00:	40000c00 	.word	0x40000c00
 8002b04:	40010400 	.word	0x40010400
 8002b08:	40014000 	.word	0x40014000
 8002b0c:	40001800 	.word	0x40001800

08002b10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a1a      	ldr	r2, [r3, #32]
 8002b2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10f      	bne.n	8002b58 <HAL_TIM_Base_Stop_IT+0x48>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	f240 4344 	movw	r3, #1092	; 0x444
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_Base_Stop_IT+0x48>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d122      	bne.n	8002bca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d11b      	bne.n	8002bca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0202 	mvn.w	r2, #2
 8002b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f9b5 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002bb6:	e005      	b.n	8002bc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f9a7 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9b8 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d122      	bne.n	8002c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d11b      	bne.n	8002c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0204 	mvn.w	r2, #4
 8002bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f98b 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002c0a:	e005      	b.n	8002c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f97d 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f98e 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d122      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d11b      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0208 	mvn.w	r2, #8
 8002c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2204      	movs	r2, #4
 8002c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f961 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002c5e:	e005      	b.n	8002c6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f953 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f964 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d122      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d11b      	bne.n	8002cc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0210 	mvn.w	r2, #16
 8002c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f937 	bl	8002f20 <HAL_TIM_IC_CaptureCallback>
 8002cb2:	e005      	b.n	8002cc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f929 	bl	8002f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f93a 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f06f 0201 	mvn.w	r2, #1
 8002cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7fe fbfb 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d10e      	bne.n	8002d1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	d107      	bne.n	8002d1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fadf 	bl	80032dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d10e      	bne.n	8002d4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d107      	bne.n	8002d4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f8ff 	bl	8002f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d10e      	bne.n	8002d76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d107      	bne.n	8002d76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f06f 0220 	mvn.w	r2, #32
 8002d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 faa9 	bl	80032c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_ConfigClockSource+0x1c>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e0b4      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x186>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002db8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dc0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	d03e      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0xd4>
 8002dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd8:	f200 8087 	bhi.w	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de0:	f000 8086 	beq.w	8002ef0 <HAL_TIM_ConfigClockSource+0x172>
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d87f      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002dea:	2b70      	cmp	r3, #112	; 0x70
 8002dec:	d01a      	beq.n	8002e24 <HAL_TIM_ConfigClockSource+0xa6>
 8002dee:	2b70      	cmp	r3, #112	; 0x70
 8002df0:	d87b      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002df2:	2b60      	cmp	r3, #96	; 0x60
 8002df4:	d050      	beq.n	8002e98 <HAL_TIM_ConfigClockSource+0x11a>
 8002df6:	2b60      	cmp	r3, #96	; 0x60
 8002df8:	d877      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002dfa:	2b50      	cmp	r3, #80	; 0x50
 8002dfc:	d03c      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0xfa>
 8002dfe:	2b50      	cmp	r3, #80	; 0x50
 8002e00:	d873      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d058      	beq.n	8002eb8 <HAL_TIM_ConfigClockSource+0x13a>
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d86f      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002e0a:	2b30      	cmp	r3, #48	; 0x30
 8002e0c:	d064      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x15a>
 8002e0e:	2b30      	cmp	r3, #48	; 0x30
 8002e10:	d86b      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d060      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x15a>
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d867      	bhi.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d05c      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x15a>
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d05a      	beq.n	8002ed8 <HAL_TIM_ConfigClockSource+0x15a>
 8002e22:	e062      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6899      	ldr	r1, [r3, #8]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f000 f9ac 	bl	8003190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
      break;
 8002e50:	e04f      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6899      	ldr	r1, [r3, #8]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f000 f995 	bl	8003190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e74:	609a      	str	r2, [r3, #8]
      break;
 8002e76:	e03c      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f000 f909 	bl	800309c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2150      	movs	r1, #80	; 0x50
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f962 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002e96:	e02c      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f000 f928 	bl	80030fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2160      	movs	r1, #96	; 0x60
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 f952 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002eb6:	e01c      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f000 f8e9 	bl	800309c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2140      	movs	r1, #64	; 0x40
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f942 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002ed6:	e00c      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f000 f939 	bl	800315a <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e003      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      break;
 8002eee:	e000      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ef0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d00f      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3d      	ldr	r2, [pc, #244]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3c      	ldr	r2, [pc, #240]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d108      	bne.n	8002fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2f      	ldr	r2, [pc, #188]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d02b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbc:	d027      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <TIM_Base_SetConfig+0x118>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d023      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <TIM_Base_SetConfig+0x11c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d01f      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <TIM_Base_SetConfig+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d017      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	; (8003084 <TIM_Base_SetConfig+0x128>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <TIM_Base_SetConfig+0x12c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00f      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a26      	ldr	r2, [pc, #152]	; (800308c <TIM_Base_SetConfig+0x130>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a25      	ldr	r2, [pc, #148]	; (8003090 <TIM_Base_SetConfig+0x134>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a24      	ldr	r2, [pc, #144]	; (8003094 <TIM_Base_SetConfig+0x138>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a23      	ldr	r2, [pc, #140]	; (8003098 <TIM_Base_SetConfig+0x13c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d108      	bne.n	8003020 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <TIM_Base_SetConfig+0x114>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_Base_SetConfig+0xf8>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <TIM_Base_SetConfig+0x124>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d103      	bne.n	800305c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	615a      	str	r2, [r3, #20]
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40010400 	.word	0x40010400
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800
 8003090:	40001800 	.word	0x40001800
 8003094:	40001c00 	.word	0x40001c00
 8003098:	40002000 	.word	0x40002000

0800309c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f023 0201 	bic.w	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 030a 	bic.w	r3, r3, #10
 80030d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0210 	bic.w	r2, r3, #16
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	031b      	lsls	r3, r3, #12
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003136:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	621a      	str	r2, [r3, #32]
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	f043 0307 	orr.w	r3, r3, #7
 800317c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	021a      	lsls	r2, r3, #8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e05a      	b.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d01d      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d018      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1b      	ldr	r2, [pc, #108]	; (80032b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d009      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10c      	bne.n	800328c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4313      	orrs	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40010400 	.word	0x40010400
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40001800 	.word	0x40001800

080032c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <__errno>:
 80032f0:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <__errno+0x8>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000010 	.word	0x20000010

080032fc <__libc_init_array>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	4d0d      	ldr	r5, [pc, #52]	; (8003334 <__libc_init_array+0x38>)
 8003300:	4c0d      	ldr	r4, [pc, #52]	; (8003338 <__libc_init_array+0x3c>)
 8003302:	1b64      	subs	r4, r4, r5
 8003304:	10a4      	asrs	r4, r4, #2
 8003306:	2600      	movs	r6, #0
 8003308:	42a6      	cmp	r6, r4
 800330a:	d109      	bne.n	8003320 <__libc_init_array+0x24>
 800330c:	4d0b      	ldr	r5, [pc, #44]	; (800333c <__libc_init_array+0x40>)
 800330e:	4c0c      	ldr	r4, [pc, #48]	; (8003340 <__libc_init_array+0x44>)
 8003310:	f000 f8fe 	bl	8003510 <_init>
 8003314:	1b64      	subs	r4, r4, r5
 8003316:	10a4      	asrs	r4, r4, #2
 8003318:	2600      	movs	r6, #0
 800331a:	42a6      	cmp	r6, r4
 800331c:	d105      	bne.n	800332a <__libc_init_array+0x2e>
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	f855 3b04 	ldr.w	r3, [r5], #4
 8003324:	4798      	blx	r3
 8003326:	3601      	adds	r6, #1
 8003328:	e7ee      	b.n	8003308 <__libc_init_array+0xc>
 800332a:	f855 3b04 	ldr.w	r3, [r5], #4
 800332e:	4798      	blx	r3
 8003330:	3601      	adds	r6, #1
 8003332:	e7f2      	b.n	800331a <__libc_init_array+0x1e>
 8003334:	08003540 	.word	0x08003540
 8003338:	08003540 	.word	0x08003540
 800333c:	08003540 	.word	0x08003540
 8003340:	08003544 	.word	0x08003544

08003344 <memset>:
 8003344:	4402      	add	r2, r0
 8003346:	4603      	mov	r3, r0
 8003348:	4293      	cmp	r3, r2
 800334a:	d100      	bne.n	800334e <memset+0xa>
 800334c:	4770      	bx	lr
 800334e:	f803 1b01 	strb.w	r1, [r3], #1
 8003352:	e7f9      	b.n	8003348 <memset+0x4>

08003354 <sqrt>:
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	ed2d 8b02 	vpush	{d8}
 800335a:	ec55 4b10 	vmov	r4, r5, d0
 800335e:	f000 f825 	bl	80033ac <__ieee754_sqrt>
 8003362:	4622      	mov	r2, r4
 8003364:	462b      	mov	r3, r5
 8003366:	4620      	mov	r0, r4
 8003368:	4629      	mov	r1, r5
 800336a:	eeb0 8a40 	vmov.f32	s16, s0
 800336e:	eef0 8a60 	vmov.f32	s17, s1
 8003372:	f7fd fb9f 	bl	8000ab4 <__aeabi_dcmpun>
 8003376:	b990      	cbnz	r0, 800339e <sqrt+0x4a>
 8003378:	2200      	movs	r2, #0
 800337a:	2300      	movs	r3, #0
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fd fb70 	bl	8000a64 <__aeabi_dcmplt>
 8003384:	b158      	cbz	r0, 800339e <sqrt+0x4a>
 8003386:	f7ff ffb3 	bl	80032f0 <__errno>
 800338a:	2321      	movs	r3, #33	; 0x21
 800338c:	6003      	str	r3, [r0, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	2300      	movs	r3, #0
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fa1d 	bl	80007d4 <__aeabi_ddiv>
 800339a:	ec41 0b18 	vmov	d8, r0, r1
 800339e:	eeb0 0a48 	vmov.f32	s0, s16
 80033a2:	eef0 0a68 	vmov.f32	s1, s17
 80033a6:	ecbd 8b02 	vpop	{d8}
 80033aa:	bd38      	pop	{r3, r4, r5, pc}

080033ac <__ieee754_sqrt>:
 80033ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b0:	ec55 4b10 	vmov	r4, r5, d0
 80033b4:	4e55      	ldr	r6, [pc, #340]	; (800350c <__ieee754_sqrt+0x160>)
 80033b6:	43ae      	bics	r6, r5
 80033b8:	ee10 0a10 	vmov	r0, s0
 80033bc:	ee10 3a10 	vmov	r3, s0
 80033c0:	462a      	mov	r2, r5
 80033c2:	4629      	mov	r1, r5
 80033c4:	d110      	bne.n	80033e8 <__ieee754_sqrt+0x3c>
 80033c6:	ee10 2a10 	vmov	r2, s0
 80033ca:	462b      	mov	r3, r5
 80033cc:	f7fd f8d8 	bl	8000580 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4620      	mov	r0, r4
 80033d6:	4629      	mov	r1, r5
 80033d8:	f7fc ff1c 	bl	8000214 <__adddf3>
 80033dc:	4604      	mov	r4, r0
 80033de:	460d      	mov	r5, r1
 80033e0:	ec45 4b10 	vmov	d0, r4, r5
 80033e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033e8:	2d00      	cmp	r5, #0
 80033ea:	dc10      	bgt.n	800340e <__ieee754_sqrt+0x62>
 80033ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80033f0:	4330      	orrs	r0, r6
 80033f2:	d0f5      	beq.n	80033e0 <__ieee754_sqrt+0x34>
 80033f4:	b15d      	cbz	r5, 800340e <__ieee754_sqrt+0x62>
 80033f6:	ee10 2a10 	vmov	r2, s0
 80033fa:	462b      	mov	r3, r5
 80033fc:	ee10 0a10 	vmov	r0, s0
 8003400:	f7fc ff06 	bl	8000210 <__aeabi_dsub>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	f7fd f9e4 	bl	80007d4 <__aeabi_ddiv>
 800340c:	e7e6      	b.n	80033dc <__ieee754_sqrt+0x30>
 800340e:	1512      	asrs	r2, r2, #20
 8003410:	d074      	beq.n	80034fc <__ieee754_sqrt+0x150>
 8003412:	07d4      	lsls	r4, r2, #31
 8003414:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003418:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800341c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003420:	bf5e      	ittt	pl
 8003422:	0fda      	lsrpl	r2, r3, #31
 8003424:	005b      	lslpl	r3, r3, #1
 8003426:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800342a:	2400      	movs	r4, #0
 800342c:	0fda      	lsrs	r2, r3, #31
 800342e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003432:	107f      	asrs	r7, r7, #1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2516      	movs	r5, #22
 8003438:	4620      	mov	r0, r4
 800343a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800343e:	1886      	adds	r6, r0, r2
 8003440:	428e      	cmp	r6, r1
 8003442:	bfde      	ittt	le
 8003444:	1b89      	suble	r1, r1, r6
 8003446:	18b0      	addle	r0, r6, r2
 8003448:	18a4      	addle	r4, r4, r2
 800344a:	0049      	lsls	r1, r1, #1
 800344c:	3d01      	subs	r5, #1
 800344e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003452:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003456:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800345a:	d1f0      	bne.n	800343e <__ieee754_sqrt+0x92>
 800345c:	462a      	mov	r2, r5
 800345e:	f04f 0e20 	mov.w	lr, #32
 8003462:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003466:	4281      	cmp	r1, r0
 8003468:	eb06 0c05 	add.w	ip, r6, r5
 800346c:	dc02      	bgt.n	8003474 <__ieee754_sqrt+0xc8>
 800346e:	d113      	bne.n	8003498 <__ieee754_sqrt+0xec>
 8003470:	459c      	cmp	ip, r3
 8003472:	d811      	bhi.n	8003498 <__ieee754_sqrt+0xec>
 8003474:	f1bc 0f00 	cmp.w	ip, #0
 8003478:	eb0c 0506 	add.w	r5, ip, r6
 800347c:	da43      	bge.n	8003506 <__ieee754_sqrt+0x15a>
 800347e:	2d00      	cmp	r5, #0
 8003480:	db41      	blt.n	8003506 <__ieee754_sqrt+0x15a>
 8003482:	f100 0801 	add.w	r8, r0, #1
 8003486:	1a09      	subs	r1, r1, r0
 8003488:	459c      	cmp	ip, r3
 800348a:	bf88      	it	hi
 800348c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8003490:	eba3 030c 	sub.w	r3, r3, ip
 8003494:	4432      	add	r2, r6
 8003496:	4640      	mov	r0, r8
 8003498:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800349c:	f1be 0e01 	subs.w	lr, lr, #1
 80034a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80034a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80034a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80034ac:	d1db      	bne.n	8003466 <__ieee754_sqrt+0xba>
 80034ae:	430b      	orrs	r3, r1
 80034b0:	d006      	beq.n	80034c0 <__ieee754_sqrt+0x114>
 80034b2:	1c50      	adds	r0, r2, #1
 80034b4:	bf13      	iteet	ne
 80034b6:	3201      	addne	r2, #1
 80034b8:	3401      	addeq	r4, #1
 80034ba:	4672      	moveq	r2, lr
 80034bc:	f022 0201 	bicne.w	r2, r2, #1
 80034c0:	1063      	asrs	r3, r4, #1
 80034c2:	0852      	lsrs	r2, r2, #1
 80034c4:	07e1      	lsls	r1, r4, #31
 80034c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80034ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80034ce:	bf48      	it	mi
 80034d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80034d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80034d8:	4614      	mov	r4, r2
 80034da:	e781      	b.n	80033e0 <__ieee754_sqrt+0x34>
 80034dc:	0ad9      	lsrs	r1, r3, #11
 80034de:	3815      	subs	r0, #21
 80034e0:	055b      	lsls	r3, r3, #21
 80034e2:	2900      	cmp	r1, #0
 80034e4:	d0fa      	beq.n	80034dc <__ieee754_sqrt+0x130>
 80034e6:	02cd      	lsls	r5, r1, #11
 80034e8:	d50a      	bpl.n	8003500 <__ieee754_sqrt+0x154>
 80034ea:	f1c2 0420 	rsb	r4, r2, #32
 80034ee:	fa23 f404 	lsr.w	r4, r3, r4
 80034f2:	1e55      	subs	r5, r2, #1
 80034f4:	4093      	lsls	r3, r2
 80034f6:	4321      	orrs	r1, r4
 80034f8:	1b42      	subs	r2, r0, r5
 80034fa:	e78a      	b.n	8003412 <__ieee754_sqrt+0x66>
 80034fc:	4610      	mov	r0, r2
 80034fe:	e7f0      	b.n	80034e2 <__ieee754_sqrt+0x136>
 8003500:	0049      	lsls	r1, r1, #1
 8003502:	3201      	adds	r2, #1
 8003504:	e7ef      	b.n	80034e6 <__ieee754_sqrt+0x13a>
 8003506:	4680      	mov	r8, r0
 8003508:	e7bd      	b.n	8003486 <__ieee754_sqrt+0xda>
 800350a:	bf00      	nop
 800350c:	7ff00000 	.word	0x7ff00000

08003510 <_init>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	bf00      	nop
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr

0800351c <_fini>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr
